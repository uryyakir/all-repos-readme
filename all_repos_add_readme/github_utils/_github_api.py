from typing import NamedTuple
from typing import Optional
from github import Github
from github.GithubException import UnknownObjectException
import json
# local modules
from all_repos_add_readme._exceptions import RepoReadmeNeedsUpdate
from all_repos_add_readme.constants import TOOL_NAME
from all_repos_add_readme.constants import TOOL_COMMIT_MESSAGE
from all_repos_add_readme.github_utils._repo_ignore import RepoIgnore
from all_repos_add_readme.github_utils._github_repo import _Repo


class GithubConfig(NamedTuple):
    username: str
    apiKey: str


def main(user_input: Optional[str], dry_run: bool) -> None:
    with open('config.json', encoding='utf8') as config_file:
        github_config = GithubConfig(**json.load(config_file))

    github = Github(login_or_token=github_config.apiKey)
    repo_ignore = RepoIgnore()

    for github_repo in set(github.get_user().get_repos(affiliation='owner')):
        _should_ignore = repo_ignore.should_ignore(github_repo)
        if not github_repo.fork and not _should_ignore:
            try:
                readme_file = github_repo.get_contents(
                    github_repo.get_readme().path
                )
                readme_content = readme_file.decoded_content.decode()

                if TOOL_NAME in readme_content:
                    # repo already has a README.md file generate by the tool
                    # let's update its stats
                    raise RepoReadmeNeedsUpdate(readme_sha=readme_file.sha)

                else:
                    pass  # noop

            except UnknownObjectException as exc:  # no README
                print(f"creating README.md for {github_repo.name}")
                _repo = _Repo(repo=github_repo)
                readme_content = _repo.generate_readme_string(user_input)
                dry_run_indented_content = '\n'.join(['\t\t' + line for line in readme_content.split('\n')])
                if isinstance(exc, RepoReadmeNeedsUpdate):
                    # specific UC where repo already has a README file generated by this tool
                    # we would like to update the README's stats
                    if not dry_run:
                        github_repo.update_file(
                            path="README.md",
                            message=TOOL_COMMIT_MESSAGE,
                            content=readme_content,
                            sha=exc.sha
                        )

                    else:
                        print("--- dry run: updating existing README.md in repo:\n"
                              f"\tCommit message: {TOOL_COMMIT_MESSAGE}\n"
                              f"\tNew file content:\n{dry_run_indented_content}\n{'*'*10}")

                else:
                    # first use UC, repo has no README so we need to generate one
                    if not dry_run:
                        github_repo.create_file(
                            path="README.md",
                            message=TOOL_COMMIT_MESSAGE,
                            content=readme_content,
                        )

                    else:
                        print("--- dry run: creating README.md in repo:\n"
                              f"\tCommit message: {TOOL_COMMIT_MESSAGE}\n"
                              f"\tNew file content:\n{dry_run_indented_content}\n{'*'*10}")

        elif _should_ignore:
            print(f"skipping {github_repo.full_name}: found in .repoignore")


if __name__ == "__main__":
    # some random input for testing purposes
    main(None, dry_run=True)
